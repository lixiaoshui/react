{"version":3,"sources":["logo.svg","ShowTime.js","App.js","ToDolist/Todoinput.js","ToDolist/Todoing.js","ToDolist/Todolist.js","index.js"],"names":["module","exports","React","Component","App","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","this","refs","focus","ref","onChange","onKeyDown","type","inp","onClick","console","log","Todoing","todo","map","item","idx","del","defaultProps","Todolist","addItem","data","delItem","splice","ReactDOM","render","document","getElementById","className"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,oMCGpBC,IAAMC,U,YCsBdC,I,sBCrBMC,E,YAEjB,aAAc,IAAD,8BACT,+CAQJC,YAAa,SAACC,GAEO,KAAdA,EAAEC,SAED,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAbnB,EAgBbC,aAAe,SAACN,GACZ,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAMC,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,EAAEL,EAAEI,OAAOC,UAhB5D,EAAKN,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKC,MAAQ,CACTC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAuBTC,KAAKC,KAAKJ,EAAEK,U,+BAEN,IAAD,OACL,OACI,6BACI,2BAAOC,IAAI,IAAIV,KAAK,IAAIW,SAAUJ,KAAKT,aAAcD,MAAOU,KAAKJ,MAAMC,EAAGQ,UAAWL,KAAKhB,YAAasB,KAAK,SADhH,IAEI,2BAAOb,KAAK,IAAIW,SAAUJ,KAAKT,aAAcD,MAAOU,KAAKJ,MAAME,EAAGO,UAAWL,KAAKhB,YAAasB,KAAK,SAFxG,IAGI,2BAAOb,KAAK,IAAIW,SAAUJ,KAAKT,aAAcD,MAAOU,KAAKJ,MAAMG,EAAGM,UAAWL,KAAKhB,YAAasB,KAAK,SAHxG,IAII,2BAAIZ,SAASM,KAAKJ,MAAMC,EAAEG,KAAKJ,MAAME,EAAEE,KAAKJ,MAAMG,IAElD,2BAAOI,IAAK,SAACI,GAAO,EAAKA,IAAIA,GAAMD,KAAK,SACxC,4BAAQE,QAAS,WAAKC,QAAQC,IAAI,EAAKH,IAAIjB,SAA3C,qB,GApCuBT,aCDlB8B,E,iLAIP,IAAD,OACAC,EAAQZ,KAAKb,MAAbyB,KACL,OACI,4BAEQA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OAAY,4BAAUA,EAAV,MAAiB,4BAAQP,QAAS,kBAAI,EAAKrB,MAAM6B,IAAID,KAApC,yB,GATrBlC,aAoBrC8B,EAAQM,aAAe,CACnBL,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,I,ICpBGM,E,YACjB,aAAc,IAAD,8BACT,+CAuBJC,QAAU,SAACC,GAIP,EAAK5B,SAAS,CACVoB,KAAK,GAAD,mBAAK,EAAKhB,MAAMgB,MAAhB,CAAqBQ,OA7BpB,EAgCbC,QAAU,SAACN,GAEP,IAAIH,EAAI,YAAO,EAAKhB,MAAMgB,MAC1BA,EAAKU,OAAOP,EAAI,GAEhB,EAAKvB,UAAS,SAACI,EAAMT,GAEjB,OADAsB,QAAQC,IAAId,EAAMgB,MACX,CACHA,KAAKA,OAtCb,EAAKhB,MAAQ,CACTgB,KAAK,CAAC,EAAE,EAAE,GACVf,EAAE,IACFC,EAAE,KALG,E,sEAqDT,OACI,6BACI,kBAAC,EAAD,CAAWV,IAAKY,KAAKmB,UACrB,kBAAC,EAAD,CAASH,IAAKhB,KAAKqB,QAAST,KAAMZ,KAAKJ,MAAMgB,Y,GAzDvB/B,aCqBtC0C,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SAmH3CD,SAASC,eAAe,QAI9BC,UAAY,W","file":"static/js/main.012f16d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React,{Fragment,Component} from 'react';\r\n\r\n\r\nclass ShowTime extends React.Component{\r\n    constructor(props){\r\n        console.log('constructor');\r\n        super(props);\r\n        this.state = {\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        setTimeout(()=>{\r\n            this.setState({//一执行 页面就会重新变\r\n                time:new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('didupdate');\r\n        console.log(preProps,preState);//56\r\n        console.log(this.state.time);//57多一秒\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n\r\n        return {name:this.state.a}\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        var {name,age} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {/* 条件渲染 */}\r\n                {name.length>5?<div>姓名：{name}</div>:''}\r\n                {name.length>5&&<div>姓名：{name}</div>}\r\n                <div>{this.state.time}</div>\r\n                \r\n                {/**循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index%2 == 0){\r\n                                return <p key={index}>{item}</p>\r\n                            }\r\n                        })//找一个能返回数组的方法\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n// export default ShowTime;//默认导出用export  文件只能默认导出一次,被引入的文件可以重命名\r\n\r\n//命名导出   可以导出多个，被引入时与导出的名一致\r\n//  可以导出函数 常量 ...\r\nexport {ShowTime};\r\nexport const num =100;\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { Component } from 'react'\r\n//受控组件：value值呗react控制的表单元素\r\n//可以实时获取表单元素的值（实现表单验证） 写法相对麻烦\r\n//\r\nexport default class Todoinput extends Component {\r\n    // 两种绑定this的方式\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    handleInput =(e) => {\r\n        //绑定this 事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){//敲回车\r\n            //console.log(e.target.value);//获取input框的内容\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        // console.los(this);\r\n        this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref='a' name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\" />+\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\" />+\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\" />=\r\n                <p>{parseInt(this.state.a+this.state.b+this.state.c)}</p>\r\n                {/* 非受控组件：一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    // delItem =(idx)=>{\r\n    //     this.props.del(idx);\r\n    // }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,idx)=><li>{item,idx}---<button onClick={()=>this.props.del(idx)}>删除</button></li>)\r\n                //                                                         // this.delItem.bind(this,idx)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes = {//定义属性的类型\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\nTodoing.defaultProps = {//\r\n    todo:[1,2,3,4,4]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3],\r\n            a:100,\r\n            b:200\r\n        }\r\n\r\n\r\n        //深拷贝\\浅拷贝\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 = {c:300};\r\n        //var o = {...obj};//obj的时候是100  {...obj}的时候是200\r\n        //var o = Object.assign(obj,obj1);//将obj1整合到obj上!!!!!!!!!!!\r\n        //var o = JSON.parse(JSON.stringify(obj));//直接转换成一个普通的字符串 然后再转化为对象  属于深拷贝\r\n        //o.a = 200;\r\n        //o.b[0] = 200;//属于浅拷贝\r\n        // console.log(obj===o);\r\n        // console.log(Object.keys(obj));//obj的属性名组成的数组\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item);\r\n        //     console.log(obj[item]);\r\n        // })\r\n    }\r\n    addItem = (data) => {\r\n        // this.state.todo.push(data); 不行！   不要对状态做出任何处理\r\n        // console.log(data);\r\n        // console.log(this.state.todo);\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx) => {\r\n        //1、不能直接改变或处理state，通过setState改变\r\n        let todo = [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        //2、setState是异步执行\r\n        this.setState((state,props)=>{//state是为了拿到前一个值\r\n            console.log(state.todo);\r\n            return {\r\n                todo:todo\r\n            }\r\n        })\r\n        //在setState里获取state可能会出错，不是一开始想要得到的值\r\n        //可以像上面那样，把第一个参数写成state\r\n\r\n        // this.setState({\r\n        //     todo:this.state.num +100\r\n        // },()=>{//callback函数 拿到的值是最新的\r\n        //     console.log(this.state.todo);\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {ShowTime} from './ShowTime';\nimport App from './App';\nimport Todolist from './ToDolist/Todolist';\n\n//引用的文件如果是js文件不用加后缀名，剩下的都要加后缀名\n//import导入文件\n\n\n// function ShowTime(props){\n//     console.log(props);\n//     return (<React.Fragment>\n//                 <div>{props.name}</div>\n//                 <div>{new Date().toLocaleString()}</div>\n//             </React.Fragment>)\n// }\n\n//用类的方式声明一个组件\n\n\n// 组件交互\n// 父组件 ->  子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// 子组件 ->  父组件：\nReactDOM.render(<Todolist />,document.getElementById('root'))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime name=\"zhangsan\" age={num}/>,\n//     document.getElementById(\"root\")\n// )\n\n\n\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>{new Date().toLocaleString()}</div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// };\n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\nvar str = 'react'\n\nvar obj = {\n    type:'div',\n    props:{\n        id:'tit',\n        class:'tit',\n        children:[\n            'hello',\n            'w',\n            'orld',\n            {\n                type:'h1',\n                props:{\n                    id:'tit',\n                    class:'tit',\n                    children:[\n                        'hello',\n                        'w',\n                        'orld'\n                    ]\n                }\n            }\n        ]\n    }\n}\n\nfunction render(obj,container){\n    var {type,props} = obj;\n    //文档碎片\n    var fragment = document.createDocumentFragment();//不用传参\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item];\n        }else if(item === 'children'){\n            for(var i=0;i<props[item].length;i++){\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    // ele.innerHTML += props.children[i];\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }\n        else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n// render(obj,document.getElementById('root'));\n//页面渲染过程\n// 请求HTML页面，浏览器HTML解析器解析html文件，生成DOM树\n// link引入css文件、css解析器解析css，生成css对象模型，CSSOM和DOM树结合生成一个render tree，最后浏览器\n\n//页面回流（重排reflow）:DOM结构变化，内容变化，大小、位置的变化都会引起页面回流\n//页面重绘（repaint）:颜色的变化（背景色、字体颜色、边框颜色）\n\n//1、先用变量进行DOM处理，最后一次渲染\n/*\nconsole.time('time');\nvar div = document.getElementById('root')\nvar str = ''\nfor(var i=0;i<1000;i++){\n    str += '<p>'+i+'</p>';\n\n}\ndiv.innerHTML = str;\nconsole.timeEnd('time');\n*/\n//2、对于样式的处理,声明一个css类\nvar div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\ndiv.className = 'active';\n//3、offsetLeft、offsetWidth等都会引起回流\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid  + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）\n\n\n//var ele = <h1 class=\"tit\">hello {obj}</h1>;   //JSX表达式\n\n//babel编译 返回对象\n//var ele = React.createElement('h1',{id:'tit',class:'title'},\"hello\",React.createElement('p',{id:'t',class:'tit'},\"react\"));\n// console.log(ele);\n// ReactDOM.render(ele, document.getElementById('root'));\n\n"],"sourceRoot":""}